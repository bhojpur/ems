// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmsUIClient is the client API for EmsUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmsUIClient interface {
	// ListPoolSpecs returns a list of Message Pool(s) that can be started through the UI.
	ListPoolSpecs(ctx context.Context, in *ListPoolSpecsRequest, opts ...grpc.CallOption) (EmsUI_ListPoolSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type emsUIClient struct {
	cc grpc.ClientConnInterface
}

func NewEmsUIClient(cc grpc.ClientConnInterface) EmsUIClient {
	return &emsUIClient{cc}
}

func (c *emsUIClient) ListPoolSpecs(ctx context.Context, in *ListPoolSpecsRequest, opts ...grpc.CallOption) (EmsUI_ListPoolSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmsUI_ServiceDesc.Streams[0], "/v1.EmsUI/ListPoolSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &emsUIListPoolSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmsUI_ListPoolSpecsClient interface {
	Recv() (*ListPoolSpecsResponse, error)
	grpc.ClientStream
}

type emsUIListPoolSpecsClient struct {
	grpc.ClientStream
}

func (x *emsUIListPoolSpecsClient) Recv() (*ListPoolSpecsResponse, error) {
	m := new(ListPoolSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emsUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmsUIServer is the server API for EmsUI service.
// All implementations must embed UnimplementedEmsUIServer
// for forward compatibility
type EmsUIServer interface {
	// ListPoolSpecs returns a list of Message Pool(s) that can be started through the UI.
	ListPoolSpecs(*ListPoolSpecsRequest, EmsUI_ListPoolSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedEmsUIServer()
}

// UnimplementedEmsUIServer must be embedded to have forward compatible implementations.
type UnimplementedEmsUIServer struct {
}

func (UnimplementedEmsUIServer) ListPoolSpecs(*ListPoolSpecsRequest, EmsUI_ListPoolSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPoolSpecs not implemented")
}
func (UnimplementedEmsUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedEmsUIServer) mustEmbedUnimplementedEmsUIServer() {}

// UnsafeEmsUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmsUIServer will
// result in compilation errors.
type UnsafeEmsUIServer interface {
	mustEmbedUnimplementedEmsUIServer()
}

func RegisterEmsUIServer(s grpc.ServiceRegistrar, srv EmsUIServer) {
	s.RegisterService(&EmsUI_ServiceDesc, srv)
}

func _EmsUI_ListPoolSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPoolSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmsUIServer).ListPoolSpecs(m, &emsUIListPoolSpecsServer{stream})
}

type EmsUI_ListPoolSpecsServer interface {
	Send(*ListPoolSpecsResponse) error
	grpc.ServerStream
}

type emsUIListPoolSpecsServer struct {
	grpc.ServerStream
}

func (x *emsUIListPoolSpecsServer) Send(m *ListPoolSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmsUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmsUI_ServiceDesc is the grpc.ServiceDesc for EmsUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmsUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.EmsUI",
	HandlerType: (*EmsUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _EmsUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPoolSpecs",
			Handler:       _EmsUI_ListPoolSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems-ui.proto",
}
