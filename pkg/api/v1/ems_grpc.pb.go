// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmsServiceClient is the client API for EmsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmsServiceClient interface {
	// StartLocalPool starts a Message Pool on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ems/config.yaml
	//   3. all bytes constituting the Pool YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPool(ctx context.Context, opts ...grpc.CallOption) (EmsService_StartLocalPoolClient, error)
	// StartFromPreviousPool starts a new Pool based on a previous one.
	// If the previous Pool does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPool(ctx context.Context, in *StartFromPreviousPoolRequest, opts ...grpc.CallOption) (*StartPoolResponse, error)
	// StartPoolRequest starts a new Pool based on its specification.
	StartPool(ctx context.Context, in *StartPoolRequest, opts ...grpc.CallOption) (*StartPoolResponse, error)
	// Searches for Pool(s) known to this Pool
	ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error)
	// Subscribe listens to new Pool(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EmsService_SubscribeClient, error)
	// GetPool retrieves details of a single Pool
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
	// Listen listens to Pool updates and log output of a running Pool
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EmsService_ListenClient, error)
	// StopPool stops a currently running Pool
	StopPool(ctx context.Context, in *StopPoolRequest, opts ...grpc.CallOption) (*StopPoolResponse, error)
}

type emsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmsServiceClient(cc grpc.ClientConnInterface) EmsServiceClient {
	return &emsServiceClient{cc}
}

func (c *emsServiceClient) StartLocalPool(ctx context.Context, opts ...grpc.CallOption) (EmsService_StartLocalPoolClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmsService_ServiceDesc.Streams[0], "/v1.EmsService/StartLocalPool", opts...)
	if err != nil {
		return nil, err
	}
	x := &emsServiceStartLocalPoolClient{stream}
	return x, nil
}

type EmsService_StartLocalPoolClient interface {
	Send(*StartLocalPoolRequest) error
	CloseAndRecv() (*StartPoolResponse, error)
	grpc.ClientStream
}

type emsServiceStartLocalPoolClient struct {
	grpc.ClientStream
}

func (x *emsServiceStartLocalPoolClient) Send(m *StartLocalPoolRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *emsServiceStartLocalPoolClient) CloseAndRecv() (*StartPoolResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartPoolResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emsServiceClient) StartFromPreviousPool(ctx context.Context, in *StartFromPreviousPoolRequest, opts ...grpc.CallOption) (*StartPoolResponse, error) {
	out := new(StartPoolResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsService/StartFromPreviousPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emsServiceClient) StartPool(ctx context.Context, in *StartPoolRequest, opts ...grpc.CallOption) (*StartPoolResponse, error) {
	out := new(StartPoolResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsService/StartPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emsServiceClient) ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error) {
	out := new(ListPoolsResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsService/ListPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (EmsService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmsService_ServiceDesc.Streams[1], "/v1.EmsService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &emsServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmsService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type emsServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *emsServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emsServiceClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsService/GetPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emsServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (EmsService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &EmsService_ServiceDesc.Streams[2], "/v1.EmsService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &emsServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type EmsService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type emsServiceListenClient struct {
	grpc.ClientStream
}

func (x *emsServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *emsServiceClient) StopPool(ctx context.Context, in *StopPoolRequest, opts ...grpc.CallOption) (*StopPoolResponse, error) {
	out := new(StopPoolResponse)
	err := c.cc.Invoke(ctx, "/v1.EmsService/StopPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmsServiceServer is the server API for EmsService service.
// All implementations must embed UnimplementedEmsServiceServer
// for forward compatibility
type EmsServiceServer interface {
	// StartLocalPool starts a Message Pool on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the ems/config.yaml
	//   3. all bytes constituting the Pool YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalPool(EmsService_StartLocalPoolServer) error
	// StartFromPreviousPool starts a new Pool based on a previous one.
	// If the previous Pool does not have the can-replay condition set this call will result in an error.
	StartFromPreviousPool(context.Context, *StartFromPreviousPoolRequest) (*StartPoolResponse, error)
	// StartPoolRequest starts a new Pool based on its specification.
	StartPool(context.Context, *StartPoolRequest) (*StartPoolResponse, error)
	// Searches for Pool(s) known to this Pool
	ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error)
	// Subscribe listens to new Pool(s) updates
	Subscribe(*SubscribeRequest, EmsService_SubscribeServer) error
	// GetPool retrieves details of a single Pool
	GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	// Listen listens to Pool updates and log output of a running Pool
	Listen(*ListenRequest, EmsService_ListenServer) error
	// StopPool stops a currently running Pool
	StopPool(context.Context, *StopPoolRequest) (*StopPoolResponse, error)
	mustEmbedUnimplementedEmsServiceServer()
}

// UnimplementedEmsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmsServiceServer struct {
}

func (UnimplementedEmsServiceServer) StartLocalPool(EmsService_StartLocalPoolServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalPool not implemented")
}
func (UnimplementedEmsServiceServer) StartFromPreviousPool(context.Context, *StartFromPreviousPoolRequest) (*StartPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousPool not implemented")
}
func (UnimplementedEmsServiceServer) StartPool(context.Context, *StartPoolRequest) (*StartPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartPool not implemented")
}
func (UnimplementedEmsServiceServer) ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedEmsServiceServer) Subscribe(*SubscribeRequest, EmsService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedEmsServiceServer) GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedEmsServiceServer) Listen(*ListenRequest, EmsService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedEmsServiceServer) StopPool(context.Context, *StopPoolRequest) (*StopPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopPool not implemented")
}
func (UnimplementedEmsServiceServer) mustEmbedUnimplementedEmsServiceServer() {}

// UnsafeEmsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmsServiceServer will
// result in compilation errors.
type UnsafeEmsServiceServer interface {
	mustEmbedUnimplementedEmsServiceServer()
}

func RegisterEmsServiceServer(s grpc.ServiceRegistrar, srv EmsServiceServer) {
	s.RegisterService(&EmsService_ServiceDesc, srv)
}

func _EmsService_StartLocalPool_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EmsServiceServer).StartLocalPool(&emsServiceStartLocalPoolServer{stream})
}

type EmsService_StartLocalPoolServer interface {
	SendAndClose(*StartPoolResponse) error
	Recv() (*StartLocalPoolRequest, error)
	grpc.ServerStream
}

type emsServiceStartLocalPoolServer struct {
	grpc.ServerStream
}

func (x *emsServiceStartLocalPoolServer) SendAndClose(m *StartPoolResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *emsServiceStartLocalPoolServer) Recv() (*StartLocalPoolRequest, error) {
	m := new(StartLocalPoolRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _EmsService_StartFromPreviousPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).StartFromPreviousPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsService/StartFromPreviousPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).StartFromPreviousPool(ctx, req.(*StartFromPreviousPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmsService_StartPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).StartPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsService/StartPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).StartPool(ctx, req.(*StartPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmsService_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsService/ListPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).ListPools(ctx, req.(*ListPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmsServiceServer).Subscribe(m, &emsServiceSubscribeServer{stream})
}

type EmsService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type emsServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *emsServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmsService_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsService/GetPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmsService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EmsServiceServer).Listen(m, &emsServiceListenServer{stream})
}

type EmsService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type emsServiceListenServer struct {
	grpc.ServerStream
}

func (x *emsServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _EmsService_StopPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmsServiceServer).StopPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.EmsService/StopPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmsServiceServer).StopPool(ctx, req.(*StopPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EmsService_ServiceDesc is the grpc.ServiceDesc for EmsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.EmsService",
	HandlerType: (*EmsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousPool",
			Handler:    _EmsService_StartFromPreviousPool_Handler,
		},
		{
			MethodName: "StartPool",
			Handler:    _EmsService_StartPool_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _EmsService_ListPools_Handler,
		},
		{
			MethodName: "GetPool",
			Handler:    _EmsService_GetPool_Handler,
		},
		{
			MethodName: "StopPool",
			Handler:    _EmsService_StopPool_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalPool",
			Handler:       _EmsService_StartLocalPool_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _EmsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _EmsService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ems.proto",
}
